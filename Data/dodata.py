# -*- encoding: utf-8 -*-

import sys
import os
import json
import numpy as np

PATH ="./BadData/"


def getFileList(path, nofiles):
	# 获得路径path所有文件名，但不包括 nofiles 中的文件
	filelist = []
	for fn in os.listdir(path):
		if not fn in nofiles :
			filelist.append(os.path.join(path,fn))
	return filelist

def readAllFeature(filelist):
	# 从特征文件中统计所有特征并编号， 返回一个字典
	dc = {}
	cnt = 0;
	for fn in filelist:
		for line in open(fn).readlines():
			# 只要权限特征
			line = line.strip()
			if not line in dc.keys() and line[:7] == "android":
				dc[line] = cnt
				cnt+=1
	return dc

def save2Json(val, file):
	# 将val存成Json格式并保存为file文件
	f = open(file, "w")
	f.write(json.dumps(val))
	f.close()

def loadJson(file):
	# 从file文件中按行读取Json格式的变量
	# 返回： 对应的列表
	f = open(file, "r")
	ret = []
	for line in f.readlines():
		ret.append(json.loads(line))
	return ret

def calfeature(fdict, flist):
	# 把特征矩阵化
	# 返回： 一个二维列表
	ret = []
	for fn in flist:
		ls = []
		for line in open(fn,"r").readlines():
			line = line.strip()
			if line in fdict.keys():
				ls.append(fdict[line])
		ret.append(ls)
	return ret

def calMatrix(ls, numf):
	# 
	ret = []
	for line in ls:
		tmp = [0]*(numf+1)
		for k in line:	tmp[k] = 1
		tmp[numf] = 1
		ret.append(tmp)
	return ret

def do_bad():
	# 处理 bad样本的
	MAINFILE = "allfeature.json"	# 字典： (特征名, id)
	LISTFILE = "list.json"	# 稀疏矩阵
	MATFILE = "matrix.json"	# 完整矩阵
	BADX = "badX.npy"		# array格式的特征矩阵

	flist = getFileList(PATH, [MAINFILE, LISTFILE, MAINFILE])
	# 读入所有feature
	fdict = readAllFeature(flist)
	# 用列表保存稀疏矩阵信息
	ls = calfeature(fdict, flist)
	# Numpy.Array保存完整矩阵信息。 增加"调用权限个数"特征
	mat = calMatrix(ls, len(fdict))
	# 将fdict 保存为Json格式
	save2Json(fdict, os.path.join(PATH, MAINFILE))
	# 保存稀疏矩阵
	save2Json(ls, os.path.join(PATH, LISTFILE))
	# 把二维列表表示的特征保存成Json格式
	save2Json(mat, os.path.join(PATH, MATFILE))
	# 把特征矩阵保存为 numpy.array 格式， (1247,90)
	np.save(BADX, np.array(mat))


def checkFile(file):
	arr = np.load(file)
	print arr.shape


if __name__ == '__main__': 
	# do_bad();
	checkFile("badX.npy")




# 加包名，共844个特征
# 不加包名， 89种特征。
